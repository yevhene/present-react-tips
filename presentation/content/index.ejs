<section>
  <h1>React tips</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-react-tips">yevhene/present-react-tips</a>
  </small>
</section>

<section>
  <h2>Binding</h2>

  <section>
    <h3>React.createClass</h3>

    <pre><code class="javascript" data-trim contenteditable>
// This magically works with React.createClass
// because `this` is bound for you.
onChange={this.handleChange}
    </code></pre>
  </section>

  <section>
    <h3>Bind</h3>

    <pre><code class="javascript" data-trim contenteditable>
onChange={this.handleChange.bind(this)}
    </code></pre>

    <b>Danger: Bad performance</b>
  </section>

  <section>
    <h3>Arrow function</h3>

    <pre><code class="javascript" data-trim contenteditable>
onChange={e =&gt; this.handleChange(e)}
    </code></pre>

    <b>Danger: Bad performance</b>
  </section>

  <section>
    <h3>Bind in constructor</h3>

    <pre><code class="javascript" data-trim contenteditable>
constructor(props) {
  super(props);
  this.handleChange = this.handleChange.bind(this);
}
    </code></pre>
  </section>

  <section>
    <h3>Arrow function in Class property</h3>

    <pre><code class="javascript" data-trim contenteditable>
handleChange = () =&gt; {
  // call this function from render
  // and this.whatever in here works fine.
};
    </code></pre>
  </section>
</section>

<section>
  <h2>setState</h2>

  <section>
    <h3>Synchronous</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState({
  counter: this.state.counter + 1
});

afterStateChange();
    </code></pre>

    <b>Danger: Not So Synchronous</b>
  </section>

  <section>
    <h3>Asynchronous callback</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState({
  counter: this.state.counter + 1
}, () =&gt; {
  afterStateChange();
});
    </code></pre>
  </section>

  <section>
    <h3>Asynchronous</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState((prevState) =&gt; {
  counter: prevState.counter + 1
}, () =&gt; {
  afterStateChange();
});
    </code></pre>
  </section>
</section>

<section>
  <h2>References</h2>

  <section>
    <h3>Legacy</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Form extends Component {
  onSubmit() {
    sendForm({ name: this.input.value });
  }

  render() {
    return <input ref="input" />;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>Old</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Hello extends React.Component {
  constructor() {
    super();
    this.refDict = {};
  }

  render() {
    return
      &lt;Repeat
        times="3"
        template={i =&gt;
          &lt;span ref={el =&gt; this.refDict[i] = el}&gt;Hello {i}&lt;/span&gt;
        }
      /&gt;;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>New</h3>

    <pre><code class="javascript" data-trim contenteditable>
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.input = React.createRef();
  }

  onSubmit() {
    sendForm({ name: this.input.current.value });
  }

  render() {
    return <input ref={this.input} />;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>forwardRef</h3>

    <pre><code class="javascript" data-trim contenteditable>
const FancyButton = React.forwardRef((props, ref) =&gt; (
  &lt;button ref={ref} className="FancyButton"&gt;
    {props.children}
  &lt;/button&gt;
));

// You can now get a ref directly to the DOM button:
const ref = React.createRef();
&lt;FancyButton ref={ref}&gt;Click me!&lt;/FancyButton&gt;;
    </code></pre>
  </section>
</section>

<section>
  <h2>Callbacks</h2>

  <section>
    <h3><strike>componentWillMount</strike></h3>
  </section>

  <section>
    <h3><strike>componentWillReceiveProps</strike></h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  constructor(props) {
    super(props);
    this.state = { count: props.count };
  }
  componentWillReceiveProps(nextProps) {
    if (nextProps.count !== this.props.count) {
      this.setState({ count: nextProps.count });
    }
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>static getDerivedStateFromProps</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    return { count: nextProps.count };
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3><strike>componentWillUpdate</strike><h3>
  </section>

  <section>
    <h3>getSnapshotBeforeUpdate</h3>

    <pre><code class="javascript" data-trim contenteditable>
  getSnapshotBeforeUpdate(prevProps, prevState) {
    if (prevProps.list.length &lt; this.props.list.length) {
      const list = this.listRef.current;
      return list.scrollHeight - list.scrollTop;
    }
    return null;
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    if (snapshot !== null) {
      const list = this.listRef.current;
      list.scrollTop = list.scrollHeight - snapshot;
    }
  }
    </code></pre>
  </section>

  <section>
    <img src="images/react-lifecycle.jpg" />
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
