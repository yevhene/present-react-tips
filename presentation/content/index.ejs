<section>
  <h1>React tips</h1>

  <small>
    Yevhen Shemet<br />
    github: <a target="_blank" href="https://github.com/yevhene/present-react-tips">yevhene/present-react-tips</a>
  </small>
</section>

<section>
  <h2>Binding</h2>

  <section>
    <h3>React.createClass</h3>

    <pre><code class="javascript" data-trim contenteditable>
// This magically works with React.createClass
// because `this` is bound for you.
onChange={this.handleChange}
    </code></pre>
  </section>

  <section>
    <h3>Bind</h3>

    <pre><code class="javascript" data-trim contenteditable>
onChange={this.handleChange.bind(this)}
    </code></pre>

    <b>Danger: Bad performance</b>
  </section>

  <section>
    <h3>Arrow function</h3>

    <pre><code class="javascript" data-trim contenteditable>
onChange={e =&gt; this.handleChange(e)}
    </code></pre>

    <b>Danger: Bad performance</b>
  </section>

  <section>
    <h3>Bind in constructor</h3>

    <pre><code class="javascript" data-trim contenteditable>
constructor(props) {
  super(props);
  this.handleChange = this.handleChange.bind(this);
}
    </code></pre>
  </section>

  <section>
    <h3>Arrow function in Class property</h3>

    <pre><code class="javascript" data-trim contenteditable>
handleChange = () =&gt; {
  // call this function from render
  // and this.whatever in here works fine.
};
    </code></pre>
  </section>
</section>

<section>
  <h2>setState</h2>

  <section>
    <h3>Synchronous</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState({
  counter: this.state.counter + 1
});

afterStateChange();
    </code></pre>

    <b>Danger: Not So Synchronous</b>
  </section>

  <section>
    <h3>Asynchronous callback</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState({
  counter: this.state.counter + 1
}, () =&gt; {
  afterStateChange();
});
    </code></pre>
  </section>

  <section>
    <h3>Asynchronous</h3>

    <pre><code class="javascript" data-trim contenteditable>
setState((prevState) =&gt; {
  counter: prevState.counter + 1
}, () =&gt; {
  afterStateChange();
});
    </code></pre>
  </section>
</section>

<section>
  <h2>References</h2>

  <section>
    <h3>Legacy</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Form extends Component {
  onSubmit() {
    sendForm({ name: this.input.value });
  }

  render() {
    return <input ref="input" />;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>Old</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Hello extends React.Component {
  constructor() {
    super();
    this.refDict = {};
  }

  render() {
    return
      &lt;Repeat
        times="3"
        template={i =&gt;
          &lt;span ref={el =&gt; this.refDict[i] = el}&gt;Hello {i}&lt;/span&gt;
        }
      /&gt;;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>New</h3>

    <pre><code class="javascript" data-trim contenteditable>
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.input = React.createRef();
  }

  onSubmit() {
    sendForm({ name: this.input.current.value });
  }

  render() {
    return <input ref={this.input} />;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>forwardRef</h3>

    <pre><code class="javascript" data-trim contenteditable>
const FancyButton = React.forwardRef((props, ref) =&gt; (
  &lt;button ref={ref} className="FancyButton"&gt;
    {props.children}
  &lt;/button&gt;
));

// You can now get a ref directly to the DOM button:
const ref = React.createRef();
&lt;FancyButton ref={ref}&gt;Click me!&lt;/FancyButton&gt;;
    </code></pre>
  </section>
</section>

<section>
  <h2>Callbacks</h2>

  <section>
    <h3><strike>componentWillMount</strike></h3>
  </section>

  <section>
    <h3><strike>componentWillReceiveProps</strike></h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  constructor(props) {
    super(props);
    this.state = { count: props.count };
  }
  componentWillReceiveProps(nextProps) {
    if (nextProps.count !== this.props.count) {
      this.setState({ count: nextProps.count });
    }
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3>static getDerivedStateFromProps</h3>

    <pre><code class="javascript" data-trim contenteditable>
class Conter extends Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  static getDerivedStateFromProps(nextProps, prevState) {
    return { count: nextProps.count };
  }

  render() {
    return &lt;h1&gt;{this.state.count}&lt;/h1&gt;
  }
}
    </code></pre>
  </section>

  <section>
    <h3><strike>componentWillUpdate</strike><h3>
  </section>

  <section>
    <h3>getSnapshotBeforeUpdate</h3>

    <pre><code class="javascript" data-trim contenteditable>
  getSnapshotBeforeUpdate(prevProps, prevState) {
    if (prevProps.list.length &lt; this.props.list.length) {
      const list = this.listRef.current;
      return list.scrollHeight - list.scrollTop;
    }
    return null;
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    if (snapshot !== null) {
      const list = this.listRef.current;
      list.scrollTop = list.scrollHeight - snapshot;
    }
  }
    </code></pre>
  </section>

  <section>
    <img src="images/react-lifecycle.jpg" />
  </section>
</section>

<section>
  <h2>Lint</h2>

  <ul>
    <li><a href="https://github.com/eslint/eslint">eslint</a></li>
  </ul>

  <ul>
    <li><a href="https://github.com/benmosher/eslint-plugin-import">eslint-plugin-import</a></li>
    <li><a href="https://github.com/yannickcr/eslint-plugin-react">eslint-plugin-react</a></li>
    <li><a href="https://github.com/evcohen/eslint-plugin-jsx-a11y">eslint-plugin-jsx-a11y</a></li>
  </ul>

  <ul>
    <li>eslint-config-airbnb</li>
    <li>eslint-config-fbjs</li>
    <li>eslint-config-google</li>
  </ul>
</section>

<section>
  <h2>Avoid rerender</h2>

  <section>
    <h3>shouldComponentUpdate</h3>

    <pre><code class="javascript" data-trim contenteditable>
class MyComponent extends Component {
  shouldComponentUpdate (nextProps, nextState) {
    return !_.isEqual(this.props, nextProps) ||
           !_.isEqual(this.state, nextState);
  }

  render() {
    return &lt;HeavyRerender&gt;;
  }
}
    </code></pre>

    <b>For performance gain with custom checks</b>
  </section>

  <section>
    <h3>PureComponent</h3>

    <pre><code class="javascript" data-trim contenteditable>
class MyComponent extends PureComponent {
  render() {
    return &lt;HeavyRerender&gt;;
  }
}
    </code></pre>

    <b>For performance gain</b>
  </section>

  <section>
    <h3>Stateless component</h3>

    <pre><code class="javascript" data-trim contenteditable>
function MyComponent() {
  return &lt;HeavyRerender&gt;;
}
    </code></pre>

    <b>Warning: No performance gain</b>
  </section>
</section>

<section>
  <h2>Components vs Containers</h2>

  <section>
    <h3>@dan_abramov</h3>

    <a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0">Presentational and Container Components</a>
  </section>

  <section>
    <h3>My</h2>

    <dl>
      <dt>Containers</dt><dd>Connected to redux;</dd>
      <dt>Components</dt><dd>Receive props.</dd>
    </dl>

    <hr />

    <dl>
      <dt>Screens</dt><dd>Top container components. Organized by screen hierarchy;</dd>
      <dt>Controls</dt><dd>Components with state, often form controls.</dd>
    </dl>
  </section>

  <section>
    <h3>Full state control vs Partial state control</h3>
  </section>
</section>

<section>
  <h2>Redux best practices</h2>

  <section>
    <h3>When?</h3>

    <h4>Use Redux when data structure doesn't match component structure.</h4>
  </section>

  <section>
    <h3>Use tools for side-effects</h3>

    <ul>
      <li>redux-thunk</li>
      <li>redux-promise</li>
      <li>redux-saga (most flexible)</li>
    </ul>
  </section>

  <section>
    <h3>Use Reselect</h3>

    <pre><code class="javascript" data-trim contenteditable>
import { createSelector } from 'reselect'

let exampleState = {
  shop: {
    taxPercent: 8,
    items: [
      { name: 'apple', value: 1.20 },
      { name: 'orange', value: 0.95 },
    ]
  }
}
    </code></pre>

    <b>Memoization</b>
  </section>

  <section>
    <h3>Use Reselect</h3>

    <pre><code class="javascript" data-trim contenteditable>
const shopItemsSelector = state =&gt; state.shop.items
const taxPercentSelector = state =&gt; state.shop.taxPercent
const subtotalSelector = createSelector(
  shopItemsSelector,
  items =&gt; items.reduce((acc, item) =&gt; acc + item.value, 0)
)
const taxSelector = createSelector(
  subtotalSelector,
  taxPercentSelector,
  (subtotal, taxPercent) =&gt; subtotal * (taxPercent / 100)
)
export const totalSelector = createSelector(
  subtotalSelector,
  taxSelector,
  (subtotal, tax) =&gt; ({ total: subtotal + tax })
)
    </code></pre>
  </section>

  <section>
    <h3>You can use action/reducer creators</h3>

    <ul>
      <li><a href="https://github.com/redux-utilities/redux-actions">redux-utilities/redux-actions</a></li>
      <li><a href="https://github.com/erikras/ducks-modular-redux">erikras/ducks-modular-redux</a></li>
    </ul>

    <b>But do not have to</b>
  </section>

  <section>
    <h3>You can use Immutable.js</h3>

    <pre><code class="javascript" data-trim contenteditable>
...
const ids = ( /* state = [] */ state = List([]), action) =&gt; {
  switch (action.type) {
    case 'FETCH':
      // return action.value.result;
      return List(action.value.result); // !
    case 'ADD':
      // return [...state, action.value.result];
      return state.push(action.value.result); // !
    case 'REMOVE':
      /*
      const newState = [...state];
      newState.splice(state.indexOf(action.value.result), 1);
      return newState;
      */
      return state.delete(state.indexOf(action.value.result)); // !
    default:
      return state;
  }
};
...
    </code></pre>

    <b>But do not have to</b>
  </section>
</section>

<section>
  <h2>Питання?</h2>
</section>
